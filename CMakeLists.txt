# -*- mode: cmake; tab-width: 2; indent-tabs-mode: t; truncate-lines: t; compile-command: "cmake -Wdev" -*-
# vim: set filetype=cmake autoindent tabstop=2 shiftwidth=2 noexpandtab softtabstop=2 nowrap:
cmake_minimum_required (VERSION 2.8)
project (opm-core)
set (opm-core_MAJOR_VERSION 0)
set (opm-core_MINOR_VERSION 3)
enable_language (CXX)

# build debug by default
if (NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
	set (CMAKE_BUILD_TYPE "Debug")
endif (NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
message (STATUS "Build type: ${CMAKE_BUILD_TYPE}")

# all public header files are together with the source
set (opm-core_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}")

# additional search modules
list (APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake/Modules")

# macro to set standard variables (INCLUDE_DIRS, LIBRARIES etc.)
include (OpmFind)

# compile with C++0x/11 support if available
find_package (CXX11Features REQUIRED)

# put debug information into every executable
include (UseDebugSymbols)

# optimize full if we're not doing a debug build
include (UseOptimization)

# turn on all warnings
include (UseWarnings)

# blas/lapack
find_and_append_package (BLAS REQUIRED)
find_and_append_package (LAPACK REQUIRED)

# Tim Davis' SuiteSparse archive
find_and_append_package (SuiteSparse COMPONENTS umfpack)

# SuperLU
find_and_append_package (SUPERLU)

# xml processing (for config parsing)
find_and_append_package (LibXml2 REQUIRED)

# various runtime library enhancements
find_and_append_package (Boost 1.39.0
	COMPONENTS date_time filesystem system unit_test_framework REQUIRED)
include (UseDynamicBoost)

# DUNE dependency
find_and_append_package (dune-istl)

# put libraries in lib/
set (CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib")
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin")

# find all the source code
file (GLOB_RECURSE opm-core_SOURCES "opm/*.c" "opm/*.cpp")

# these files are provided in source control, but can only compile with Matlab
# available
list (REMOVE_ITEM opm-core_SOURCES
	${PROJECT_SOURCE_DIR}/opm/core/grid/cpgpreprocess/mxgrdecl.c
	${PROJECT_SOURCE_DIR}/opm/core/grid/cpgpreprocess/processgrid.c
	${PROJECT_SOURCE_DIR}/opm/core/utility/parameters/tinyxml/xmltest.cpp
	${PROJECT_SOURCE_DIR}/opm/core/linalg/LinearSolverAGMG.cpp
	)

# we don't try to find any of these
set (HAVE_AGMG 0)
set (HAVE_ERT)

# create configuration header which describes available features
# necessary to compile this library
include (ConfigVars)
list (APPEND opm-core_CONFIG_VARS
	"HAVE_AGMG"
	"HAVE_DUNE_ISTL"
	"HAVE_DYNAMIC_BOOST_TEST"
	"HAVE_ERT"
	"HAVE_SUITESPARSE_UMFPACK_H"
	"/* C++0x/11 support */"
	"HAVE_NULLPTR"
	"HAVE_STATIC_ASSERT"
	)
configure_vars (
	FILE  "${PROJECT_BINARY_DIR}/config.h"
	WRITE ${opm-core_CONFIG_VARS}
	)

# some CMake properties do not do list expansion
list (REMOVE_DUPLICATES opm-core_LINKER_FLAGS)
string (REPLACE ";" " " opm-core_LINKER_FLAGS_STR "${opm-core_LINKER_FLAGS}")
remove_duplicate_libraries (opm-core)

# create this library
include_directories (${opm-core_INCLUDE_DIRS})
link_directories (${opm-core_LIBRARY_DIRS})
add_definitions (${opm-core_DEFINITIONS})
add_library (opmcore SHARED ${opm-core_SOURCES})
set_target_properties (opmcore PROPERTIES
	SOVERSION ${opm-core_MAJOR_VERSION}
	VERSION ${opm-core_MAJOR_VERSION}.${opm-core_MINOR_VERSION}
	LINK_FLAGS "${opm-core_LINKER_FLAGS_STR}"
	)
target_link_libraries (opmcore ${opm-core_LIBRARIES})

# queue this executable to be stripped
strip_debug_symbols (LIBRARY opmcore)

# write configuration file to locate library
set (opm-core_VERSION "${opm-core_MAJOR_VERSION}.${opm-core_MINOR_VERSION}")
configure_file (
	${PROJECT_SOURCE_DIR}/opm-core-config.cmake.in
	${PROJECT_BINARY_DIR}/opm-core-config.cmake
	@ONLY
	)

### test programs ###

# find the source code
file (GLOB_RECURSE tests_SOURCES "tests/*.c" "tests/*.cpp")

# conditionally disable tests when features aren't available
macro (cond_disable_test name)
	if ((NOT DEFINED ${HAVE_${name}}) OR (NOT ${HAVE_${name}}))
		message (STATUS "${name} test disabled, since ${name} is not found.")
		string (TOLOWER "${name}" name_lower)
		get_filename_component (test_${name}_FILE "tests/test_${name_lower}.cpp" ABSOLUTE)
		list (REMOVE_ITEM tests_SOURCES "${test_${name}_FILE}")
	endif ((NOT DEFINED ${HAVE_${name}}) OR (NOT ${HAVE_${name}}))
endmacro (cond_disable_test name)
cond_disable_test ("AGMG")
cond_disable_test ("ERT")

# compile each of these separately
foreach (test_FILE IN LISTS tests_SOURCES)
	get_filename_component (test_NAME "${test_FILE}" NAME_WE)
	add_executable (${test_NAME} ${test_FILE})
	set_target_properties (${test_NAME} PROPERTIES
		LINK_FLAGS "${opm-core_LINKER_FLAGS_STR}"
		)
	target_link_libraries (${test_NAME} opmcore ${opm-core_LIBRARIES})
	strip_debug_symbols (RUNTIME ${test_NAME})
endforeach (test_FILE)
